********* Working with Refs & Portals *********

Refs: 
    -it is like a useState only.
    -it preserve the value.
    -no rerender.
    -whenever the ref changes, the components function does't re-execute.
    -we can't forward ref to other component.(except 'forwardRef' in react )
    -forwardRef is used to forward refs from one component to another.


**useState VS useRef:

*For useState:

-Allows functional components to have their own state.
-Allows us to update the state inside components.
-It causes components to re-render after state updates.
-Returns the current state.
-Has an updater function that updates the state.


*For useRef:

-Returns an object with a property containing the initial value.
-Doesn't cause a component to re-render when the value or state changes.
-Data is persisted between renders.
-Allows referencing DOM elements.


setTimeout();
    that's build in js not react specific.
    (targetTime * 1000): to get timer on mili-seconds.

**ref doesn't lost the value if the components function is re-executes.


<dialog> : HTML element represents a dialog box or other interactive components, such as dismissible alert or subwindow.

        Attributes: open
        methods to render dialog: .show(), .showModal()

**useImperativeHandle:
    It is a React Hook that lets you customize the handle exposed as a ref.

**toFixed() : js method to format the number to a fixed number of decimal places.